#+title: dhcp protocol meta code

* Goals
  To produce key resources to handle the dhcp protocol

* Setup
#+BEGIN_SRC lisp
   (ql:quickload :alexandria)
   (ql:quickload :trivia)
   (ql:quickload :serapeum)
#+END_SRC


#+BEGIN_SRC lisp
  (defun ->symbol (str)
    (intern (string-upcase str)))

  (defun ->keyword (str)
    (intern (string-upcase str) :keyword))
#+END_SRC

#+RESULTS:
: ->KEYWORD

* DHCP Info

  Pulled from [[https://tools.ietf.org/html/rfc1531][RFC 1531]]

#+tblname: dhcp-f2
   | Field   | Octets | description                                                  |
   |         |        | <60>                                                         |
   |---------+--------+--------------------------------------------------------------|
   | op      |      1 | Message op code / message type.                    1 = BOOTREQUEST, 2 = BOOTREPLY |
   | htype   |      1 | Hardware address type, see ARP section in "Assigned                    Numbers" RFC; e.g., '1' = 10mb ethernet. |
   | hlen    |      1 | Hardware address length (e.g.  '6' for 10mb                    ethernet). |
   | hops    |      1 | Client sets to zero, optionally used by relay-agents                    when booting via a relay-agent. |
   | xid     |      4 | Transaction ID, a random number chosen by the                    client, used by the client and server to associate                    messages and responses between a client and a                    server. |
   | secs    |      2 | Filled in by client, seconds elapsed since client                    started trying to boot.   flags         2  Flags (see figure 2). |
   | ciaddr  |      4 | Client IP address; filled in by client in                    DHCPREQUEST if verifying previously allocated                    configuration parameters. |
   | yiaddr  |      4 | 'your' (client) IP address.                                  |
   | siaddr  |      4 | IP address of next server to use in bootstrap;                    returned in DHCPOFFER, DHCPACK and DHCPNAK by                    server. |
   | giaddr  |      4 | Relay agent IP address, used in booting via a                     relay-agent. |
   | chaddr  |     16 | Client hardware address.                                     |
   | sname   |     64 | Optional server host name, null terminated string.   file        128  Boot file name, null terminated string; "generic"                    name or null in DHCPDISCOVER, fully qualified                    directory-path name in DHCPOFFER. |
   | options |    312 | Optional parameters field.  See the options                    documents for a list of defined options. |


* Code Gen

** defclass from table
#+BEGIN_SRC lisp :var clazz=dhcp-f2 :results output verbatim :file (concat (file-name-base (buffer-name (current-buffer))) "-clos.lisp") :var name=(file-name-base (buffer-name (current-buffer))) :exports both
  (pprint
   `(defclass ,(->symbol name)
        ()
        ,(mapcar #'(lambda(row)
                     (trivia:match
                         row
                       ((list field octets description)
                        (list (->symbol field) :accessor (->symbol field) :initarg (->keyword field)))))
                 (cddr clazz))
      )
   )
#+END_SRC

#+RESULTS:
[[file:dhcp-clos.lisp]]



** TODO hydration from packet

** TODO dehydration to packet

   
#+BEGIN_SRC lisp

#+END_SRC

* hostapd 
* dhcp-discover
** give ip on staging network
   Low lease, very little bandwidth
** security challenge
   nmap device, get mac address, is there a profile for this device?

** Create a network, apply profiles for this device
*** IP aliasing on wlan0
    ip a add 192.168.1.101/255.255.255.0 dev eth0



* Staging Network
  dhcp-request => 1 minute lease
  nmap node => assign profile
  Create a new network
  dhcp-renew => give new ip/network

