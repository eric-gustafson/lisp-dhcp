#+title: dhcp protocol meta code

* Goals
  - To produce key resources to handle the dhcp protocol
  - To distribute dhcp servers into the mesh
    - seperate networks for each node
    - don't allow IP connectivity to other nodes
    - profile management
    - qos


* COMMENT Setup
** Lisp
#+BEGIN_SRC lisp
   (ql:quickload :dhcp-server)
#+END_SRC

#+BEGIN_SRC lisp
  (defun ->symbol (str)
    (intern (string-upcase str)))

  (defun ->keyword (str)
    (intern (string-upcase str) :keyword))
#+END_SRC

#+RESULTS:
: ->KEYWORD

** Elisp
#+BEGIN_SRC elisp
    (defun buff-basename ()
      (file-name-base (buffer-name (current-buffer)))
      )
    (defun buff-name (str)
      "use the basename of this buffer to generate a name for a
    compent that is generated, thus related to this buffer"
      (concat (file-name-base (buffer-name (current-buffer))) str)
      )
#+END_SRC

#+RESULTS:
: buff-name

   
* DHCP Info

** Key Resources
 
  | [[https://tools.ietf.org/html/rfc1531][RFC 1531]]       |
  | [[https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol][Wikipedia DHCP]] |
  | [[https://tools.ietf.org/html/rfc2132][RFC 2132]]       |


** DHCP Message
   
   
#+tblname: dhcp-static-header
   | Field   | Octets | description                              | type   | Notes                                    |
   |         |        | <40>                                     |        | <40>                                     |
   |---------+--------+------------------------------------------+--------+------------------------------------------|
   | op      |      1 | Message op code / message type. 1 = BOOTREQUEST, 2 = BOOTREPLY | int    |                                          |
   | htype   |      1 | Hardware address type, see ARP section in "Assigned Numbers" RFC; e.g., '1' = 10mb ethernet. | int    |                                          |
   | hlen    |      1 | Hardware address length (e.g. '6' for 10mb ethernet). | int    |                                          |
   | hops    |      1 | Client sets to zero, optionally used by relay-agents when booting via a relay-agent. | int    |                                          |
   | xid     |      4 | Transaction ID, a random number chosen by the client, used by the client and server to associate messages and responses between a client and a server. | int    |                                          |
   | secs    |      2 | Filled in by client, seconds elapsed since client started trying to boot. | int    |                                          |
   | flags   |      2 | Flags (see figure 2).                    | int    |                                          |
   | ciaddr  |      4 | Client IP address; filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters. | int    |                                          |
   | yiaddr  |      4 | 'your' (client) IP address.              | int    |                                          |
   | siaddr  |      4 | IP address of next server to use in bootstrap; returned in DHCPOFFER, DHCPACK and DHCPNAK by server. | int    |                                          |
   | giaddr  |      4 | Relay agent IP address, used in booting via a relay-agent. | int    |                                          |
   | chaddr  |     16 | Client hardware address.                 | mac    | Ethernet: 6 octets (48 bits)             |
   | sname   |     64 | Optional server host name, null terminated string. | string |                                          |
   | file    |    128 | Boot file name, null terminated string; "generic" name or null in DHCPDISCOVER, fully qualified directory-path name in DHCPOFFER. | string | I'm seeing the cookie at different places.  Search for it |
   | mcookie |      4 | 0x63825363                               | int    | Advance to the cookie and then parse     |
   | options |    312 | Optional parameters field.  See the options documents for a list of defined options. | rest   |                                          |


** DHCP Options

   Built from [[https://tools.ietf.org/html/rfc2132]]
   [[file:./parse-dhcp-options.lisp]]

   What should we return?  Hash table, keyed on code?  An object ...
   
#+tblname: dhcp-options
   | code | unit-length | number | Name                                     | Notes                                    |
   |      |             |        | <40>                                     | <40>                                     |
   |------+-------------+--------+------------------------------------------+------------------------------------------|
   |    1 |           4 |      1 | subnet mask                              | Must be sent before the router option (option 3) if both are included |
   |    2 |           4 |      1 | time offset                              |                                          |
   |   15 |           1 |      n | domain name                              |                                          |


** DHCP Message Types
#+tblname: dhcp-message-types
   | Value | Message Type |
   |-------+--------------|
   |     1 | DHCPDISCOVER |
   |     2 | DHCPOFFER    |
   |     3 | DHCPREQUEST  |
   |     4 | DHCPDECLINE  |
   |     5 | DHCPACK      |
   |     6 | DHCPNAK      |
   |     7 | DHCPRELEASE  |
   |     8 | DHCPINFORM   |

** defclass 
  
   Create an object with slots that match the table.

#+BEGIN_SRC lisp :var clazz=dhcp-static-header :results output verbatim :file (concat (file-name-base (buffer-name (current-buffer))) "-clos.lisp") :var name=(file-name-base (buffer-name (current-buffer))) :exports both
  (pprint `(in-package :dhcp-server))
  (pprint
   `(defclass ,(->symbol name)
        ()
        ,(mapcar #'(lambda(row)
                     (trivia:match
                         row
                       ((list field octets description type notes)
                        (list (->symbol field)
                              :documentation description
                              :accessor (->symbol field)
                              :initarg (->keyword field)))))
                 (cddr clazz))
      )
   )
#+END_SRC

#+RESULTS:
[[file:dhcp-clos.lisp]]



** dyhydrate

#+BEGIN_SRC lisp :var clazz=dhcp-static-header :results output verbatim :file (buff-name "-dehydrate.lisp") :var name=(buff-basename) :exports both
    (pprint `(in-package :dhcp-server))
  (pprint
     `(progn
        (defmethod ,(->symbol (serapeum:concat "read-" name "-from-stream")) ((obj ,(->symbol name)) input-stream)
          ,@(mapcar #'(lambda(row)
                        (trivia:match 
                            row
                          ((list field octets descr da-type notes)
                           (let ((type (intern (string-upcase da-type) :keyword)))
                             (cond
                               ((eq type :mac) ;; 
                                `(setf (,(->symbol field) obj)
                                       (loop :for i :below ,octets :collect (read-byte input-stream))))
                               ((eq type :rest)
                                `(setf (,(->symbol field) obj) (loop
                                                                  :for x = (read-byte  input-stream nil nil)
                                                                  :while x :collect x
                                                                  )))

                               ;; Strings have a fixed length
                               ;; Maybe we should handle fixed-length, pascal, and c with different
                               ;; keywords?
                               ((eq type :string)
                                `(setf (,(->symbol field) obj)
                                       (loop :for i :below ,octets :collect (read-byte input-stream))))
                               ((eq type :int)
                                `(setf (,(->symbol field) obj) (nums-and-txt:octets->num (nums-and-txt:read-octets ,octets input-stream) :endian :big)))
                               (t
                                (error "Unexpected type ~a" row))
                               )))))
                    (cddr  clazz))
          )
        )
     )
    )
#+END_SRC

#+RESULTS:
[[file:dhcp-dehydrate.lisp]]


** hydrate
#+BEGIN_SRC lisp :var clazz=dhcp-static-header :results output verbatim :file (buff-name "-hydrate.lisp") :var name=(buff-basename) :exports both
    (pprint `(in-package :dhcp-server))
  (pprint
   `(progn
      (defmethod ,(->symbol (serapeum:concat name "-packet")) ((obj ,(->symbol name)))
        ,#+nil(flexi-streams:with-output-to-sequence (out :element-type '(unsigned-byte 8))
          (write-byte )
          )
        (with-open-file (out #P"/tmp/a" :direction :output :element-type '(unsigned-byte 8) :if-does-not-exist :create :if-exists :overwrite)
          ,@(mapcar #'(lambda(row)
                        (trivia:match 
                            row
                          ((list field octets descr da-type notes)
                           (let ((type (intern (string-upcase da-type) :keyword)))
                             (cond
                               ((eq type :mac)
                                `(write-sequence (,(->symbol field) obj) out))
                               ((eq type :rest)
                                `(write-sequence (,(->symbol field) obj) out))
                               ((eq type :string)
                                `(write-sequence (,(->symbol field) obj) out))
                               ((eq type :int)
                                `(write-sequence (number->octets (,(->symbol field) obj) :n ,octets :endian :big) out))
                               (t
                                (error "Unexpected type ~a" row))
                               )))))
                    (cddr  clazz))
          )
        )
      )
   )
#+END_SRC

#+RESULTS:
[[file:dhcp-hydrate.lisp]]



* Dev

** Files (quick links)
|-------------------------|
| Most used files         |
|-------------------------|
| [[file:./dhcp-server.lisp]] |
| [[file:./dhcp-server.asd]]  |


** Decode a dhcp request broadcast

    172.24.200.232.bootpc > 172.24.200.15.bootps: BOOTP/DHCP, Request from 00:16:3e:79:c0:76 (oui Unknown), length 300

#+BEGIN_SRC lisp
  (defvar *a* nil)
  (with-open-file (binport #P"request-1.raw" :element-type '(unsigned-byte 8))
    (let ((obj (make-instance 'dhcp)))
      (read-dhcp-from-stream obj binport)
      (setf *a* obj)
      obj)
    )
#+END_SRC

#+RESULTS:
: #<DHCP op=1,chaddr=(0 16 3E 64 EE F3 0 0 0 0 0 0 0 0 0 0)>


** Decode the dhcp options
#+BEGIN_SRC lisp :results output
   (parse-options (options *a*) :debug t)
#+END_SRC

#+RESULTS:
: dhcp-message-type discover
: server-identifier: #(172 24 200 15) 
: request ip address=#(172 24 200 213)
: hostname=lambda-deb-stretch
: parameter requests
: rfc4174 - iSNS,n=159,len(seq)=719

   
