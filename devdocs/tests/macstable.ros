#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  ;;#+quicklisp(ql:quickload '() :silent t)
  )

(ql:quickload :numex)
  (ql:quickload :prove)
  (ql:quickload :dhcp)


  (defpackage :ros.script.mac-test.3770496090
    (:use :cl :numex :dhcp))
  (in-package :ros.script.mac-test.3770496090)


(defun simple-allocation ()
  (labels ((mreq (mac)
	     (make-instance 'dhcp:dhcp 
			    :op 1 
			    :htype 1
			    :hlen 6
			    :xid (random (expt 2 32))
			    :ciaddr #(0 0 0 0)
			    :chaddr mac)))
    (let* ((rlst (list (mreq #(1 2 3 4 5 6))
		      (mreq #(1 2 3 4 5 7))
		      (mreq #(1 2 3 4 5 6))))
	  (oobj (make-instance 'dhcp:dhcp-options
			       :mtype 1
			       :restof
			       `((:lease-time 300) )))
	   (results
	    (loop :for obj :in rlst do
	     (setf (dhcp:options obj) (dhcp:encode-dhcp-options oobj))
	     :collect
	     (dhcp:handle-dhcp-message obj)))
	   )
      (print results)
      (trivia:ematch
	  results
	((list x y z)
	 (let ((bcast-addr
		(coerce (numex:num->octets (cidr-bcast (dhcp:yiaddr x)
						       (dhcp:cidr-subnet dhcp:*this-net*)
						       )) 'vector)))
	   (print `(
		    :x ,x
		       :bcast-addr ,bcast-addr
		       :yiaddr ,(dhcp:yiaddr x)))
	   (prove:ok
	    (dhcp:ip=? bcast-addr
			      #(10 0 0 255)))
	   (prove:ok (dhcp:ip=? (dhcp:yiaddr x) #(10 0 0 2)))
	   (prove:ok (dhcp:ip=? (dhcp:yiaddr y) #(10 0 1 2)))
	   (prove:ok (dhcp:ip=? (dhcp:yiaddr z) #(10 0 0 2)))
	   )
	 ))

      ;;(ok (not (find 4 '(1 2 3))))
      ;;(is 4 4)
      ;;(isnt 1 #\1)
      )
    )
  )
  
(defun main (&rest argv)
    (declare (ignorable argv))

    (in-package :cl-user)
    (defpackage dhcp-test
      (:use :cl :dhcp
            :prove))
    (in-package :dhcp-test)

    (prove:plan 4)
    (simple-allocation)
    (prove:finalize)
    )


