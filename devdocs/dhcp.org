#+title: DHCP protocol meta code
#+author: Gus

* DHCP Info

** Key Resources
 
  | [[https://tools.ietf.org/html/rfc1531][RFC 1531]]                                                          |                              |
  | [[https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol]] | WikiPedia DHCP               |
  | [[https://tools.ietf.org/html/rfc2132][RFC 2132]]                                                          |                              |
  | [[https://www.ietf.org/rfc/rfc1878.txt]]                              | Variable Length subnet table |
  | [[https://www.aelius.com/njh/subnet_sheet.html]]                      | Subnet mask cheat sheet      |


** DHCP Message
***  Goals
     - Define the fields for documentation 
     - Use babel org mode to publish this table as a *global* variable
     - Use lisp macros to generate 
       1. CLOS object
       2. serialization code from streams, sequences, json, text, ..
  
      
#+tblname: dhcp-static-header
#+results: dhcp-bootp-base-fields
   | Field   | Octets | description                              | type   | Notes                                    |
   |         |        | <40>                                     |        | <40>                                     |
   |---------+--------+------------------------------------------+--------+------------------------------------------|
   | op      |      1 | Message op code / message type. 1 = BOOTREQUEST, 2 = BOOTREPLY | int    |                                          |
   | htype   |      1 | Hardware address type, see ARP section in "Assigned Numbers" RFC; e.g., '1' = 10mb ethernet. | int    |                                          |
   | hlen    |      1 | Hardware address length (e.g. '6' for 10mb ethernet). | int    |                                          |
   | hops    |      1 | Client sets to zero, optionally used by relay-agents when booting via a relay-agent. | int    |                                          |
   | xid     |      4 | Transaction ID, a random number chosen by the client, used by the client and server to associate messages and responses between a client and a server. | int    |                                          |
   | secs    |      2 | Filled in by client, seconds elapsed since client started trying to boot. | int    |                                          |
   | flags   |      2 | Flags (see figure 2).                    | int    |                                          |
   | ciaddr  |      4 | Client IP address; filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters. | int    |                                          |
   | yiaddr  |      4 | 'your' (client) IP address.              | int    |                                          |
   | siaddr  |      4 | IP address of next server to use in bootstrap; returned in DHCPOFFER, DHCPACK and DHCPNAK by server. | int    |                                          |
   | giaddr  |      4 | Relay agent IP address, used in booting via a relay-agent. | int    |                                          |
   | chaddr  |     16 | Client hardware address.                 | mac    | Ethernet: 6 octets (48 bits)             |
   | sname   |     64 | Optional server host name, null terminated string. | string |                                          |
   | file    |    128 | Boot file name, null terminated string; "generic" name or null in DHCPDISCOVER, fully qualified directory-path name in DHCPOFFER. | string | I'm seeing the cookie at different places.  Search for it |
   | mcookie |      4 | 0x63825363                               | int    | Advance to the cookie and then parse     |
   | options |    312 | Optional parameters field.  See the options documents for a list of defined options. | rest   |                                          |


* DHCP Message Types
  This table is used to autogenerate lisp constants

#+tblname: dhcp-message-types
   | Value | Message Type |
   |-------+--------------|
   |     1 | DHCPDISCOVER |
   |     2 | DHCPOFFER    |
   |     3 | DHCPREQUEST  |
   |     4 | DHCPDECLINE  |
   |     5 | DHCPACK      |
   |     6 | DHCPNAK      |
   |     7 | DHCPRELEASE  |
   |     8 | DHCPINFORM   |


* ARP HW Types
  This table is used to autogenerate lisp constants. 

#+tblname: arp-hwtypes
|     0 | Reserved                                      | [RFC5494]                   |
|     1 | Ethernet (10Mb)                               | [Jon_Postel]                |
|     2 | Experimental Ethernet (3Mb)                   | [Jon_Postel]                |
|     3 | Amateur Radio AX.25                           | [Philip_Koch]               |
|     4 | Proteon ProNET Token Ring                     | [Avri_Doria]                |
|     5 | Chaos                                         | [Gill_Pratt]                |
|     6 | IEEE 802 Networks                             | [Jon_Postel]                |
|     7 | ARCNET                                        | [RFC1201]                   |
|     8 | Hyperchannel                                  | [Jon_Postel]                |
|     9 | Lanstar                                       | [Tom_Unger]                 |
|    10 | Autonet Short Address                         | [Mike_Burrows]              |
|    11 | LocalTalk                                     | [Joyce_K_Reynolds]          |
|    12 | LocalNet (IBM PCNet or SYTEK LocalNET)        | [Joseph Murdock]            |
|    13 | Ultra link                                    | [Rajiv_Dhingra]             |
|    14 | SMDS                                          | [George_Clapp]              |
|    15 | Frame Relay                                   | [Andy_Malis]                |
|    16 | Asynchronous Transmission Mode (ATM)          | [JXB2]]                     |
|    17 | HDLC                                          | [Jon_Postel]                |
|    18 | Fibre Channel                                 | [RFC4338]                   |
|    19 | Asynchronous Transmission Mode 2 (ATM)        | [RFC2225]                   |
|    20 | Serial Line                                   | [Jon_Postel]                |
|    21 | Asynchronous Transmission Mode 3 (ATM)        | [Mike_Burrows]              |
|    22 | MIL-STD-188-220                               | [Herb_Jensen]               |
|    23 | Metricom                                      | [Jonathan_Stone]            |
|    24 | IEEE 1394.1995                                | [Myron_Hattig]              |
|    25 | MAPOS                                         | [Mitsuru_Maruyama][RFC2176] |
|    26 | Twinaxial                                     | [Marion_Pitts]              |
|    27 | EUI-64                                        | [Kenji_Fujisawa]            |
|    28 | HIPARP                                        | [Jean_Michel_Pittet]        |
|    29 | IP and ARP over ISO 7816-3                    | [Scott_Guthery]             |
|    30 | ARPSec                                        | [Jerome_Etienne]            |
|    31 | IPsec tunnel                                  | [RFC3456]                   |
|    32 | InfiniBand (TM)                               | [RFC4391]                   |
|    33 | TIA-102 Project 25 Common Air Interface (CAI) |                             |
|    34 | Wiegand Interface                             | [Scott_Guthery_2]           |
|    35 | Pure IP                                       | [Inaky_Perez-Gonzalez]      |
|    36 | HW_EXP1                                       | [RFC5494]                   |
|    37 | HFI                                           | [Tseng-Hui_Lin]             |
|   256 | HW_EXP2                                       | [RFC5494]                   |
|   257 | AEthernet                                     | [Geoffroy_Gramaize]         |
| 65535 | Reserved End                                  | [RFC5494                    |


* COMMENT Publish dhcp-protocol to global variable
   Execute this code block to publish the dhcp-static.  Take not of the 'eval-when' This ensures that the global variable
   is published to the compiler system so that macro to generate code have access to this global variable before the
   runtime system is established.

#+BEGIN_SRC lisp  :var ahtl=arp-hwtypes :results value table
  (defun symstr-cleanup (str)
    (cl-ppcre:regex-replace-all
     "\\s+"
     (string-downcase (cl-ppcre:regex-replace-all "[().]+" str ""))
     "-")
    )
  (mapcar #'(lambda(row) (let ((v (elt row 1))) (list v (symstr-cleanup (elt row 1))))) ahtl)
#+END_SRC

#+RESULTS:
| Reserved                                      | reserved                                    |
| Ethernet (10Mb)                               | ethernet-10mb                               |
| Experimental Ethernet (3Mb)                   | experimental-ethernet-3mb                   |
| Amateur Radio AX.25                           | amateur-radio-ax25                          |
| Proteon ProNET Token Ring                     | proteon-pronet-token-ring                   |
| Chaos                                         | chaos                                       |
| IEEE 802 Networks                             | ieee-802-networks                           |
| ARCNET                                        | arcnet                                      |
| Hyperchannel                                  | hyperchannel                                |
| Lanstar                                       | lanstar                                     |
| Autonet Short Address                         | autonet-short-address                       |
| LocalTalk                                     | localtalk                                   |
| LocalNet (IBM PCNet or SYTEK LocalNET)        | localnet-ibm-pcnet-or-sytek-localnet        |
| Ultra link                                    | ultra-link                                  |
| SMDS                                          | smds                                        |
| Frame Relay                                   | frame-relay                                 |
| Asynchronous Transmission Mode (ATM)          | asynchronous-transmission-mode-atm          |
| HDLC                                          | hdlc                                        |
| Fibre Channel                                 | fibre-channel                               |
| Asynchronous Transmission Mode 2 (ATM)        | asynchronous-transmission-mode-2-atm        |
| Serial Line                                   | serial-line                                 |
| Asynchronous Transmission Mode 3 (ATM)        | asynchronous-transmission-mode-3-atm        |
| MIL-STD-188-220                               | mil-std-188-220                             |
| Metricom                                      | metricom                                    |
| IEEE 1394.1995                                | ieee-13941995                               |
| MAPOS                                         | mapos                                       |
| Twinaxial                                     | twinaxial                                   |
| EUI-64                                        | eui-64                                      |
| HIPARP                                        | hiparp                                      |
| IP and ARP over ISO 7816-3                    | ip-and-arp-over-iso-7816-3                  |
| ARPSec                                        | arpsec                                      |
| IPsec tunnel                                  | ipsec-tunnel                                |
| InfiniBand (TM)                               | infiniband-tm                               |
| TIA-102 Project 25 Common Air Interface (CAI) | tia-102-project-25-common-air-interface-cai |
| Wiegand Interface                             | wiegand-interface                           |
| Pure IP                                       | pure-ip                                     |
| HW_EXP1                                       | hw_exp1                                     |
| HFI                                           | hfi                                         |
| HW_EXP2                                       | hw_exp2                                     |
| AEthernet                                     | aethernet                                   |
| Reserved End                                  | reserved-end                                |

   


#+BEGIN_SRC lisp :var clazz=dhcp-static-header  :var const-lst=dhcp-message-types :var ahtl=arp-hwtypes
    (with-open-file (*standard-output*
                     #P"../dhcp-bootp-fields.lisp"
                     :direction :output
                     :if-exists :supersede
                     :if-does-not-exist :create)
      (format t ";; AUTOGENERATED FILE FROM DHCP.ORG USING ORG-MODE-BABEL.  
    ;; DON'T EDIT HERE ~%")
      (pprint
       `(in-package :dhcp))

      (pprint
       `(eval-when (:compile-toplevel :load-toplevel :execute)
          ;; The eval-when makes this top-level form available at
          ;; compile time to generate code from the table
          ;; definition.
          
          (defun ->keyword (str)
            (intern (string-upcase str) :keyword))
          
          ,@(loop :for (ival dhcp-msg-sym) :in const-lst :collect `(progn
                                                                     (defconstant ,(intern (string-upcase  (format nil "+msg-type-~a+" dhcp-msg-sym))) ,ival)
                                                                     (export (quote ,(intern (string-upcase  (format nil "+msg-type-~a+" dhcp-msg-sym)))) :dhcp)
                                                                     ))
           ,@(loop :for (ival name info) :in ahtl :collect `(progn
                                                              (defconstant ,(intern (string-upcase  (format nil "+hwt-~a+" (symstr-cleanup name)))) ,ival)
                                                              (export (quote ,(intern (string-upcase  (format nil "+hwt-~a+" (symstr-cleanup name))))) :dhcp)
                                                              ))

           (defparameter *dhcp-bootp-base-fields* (quote ,(cddr clazz)))
           )
       )
      )
#+END_SRC

#+RESULTS:


* Dev

** client fqdn
#+BEGIN_SRC lisp
   (defvar *a* nil)
  (with-open-file (binport #P"dhcp-captures/client-fqdn.bin" :element-type '(unsigned-byte 8))
    (let ((obj (make-instance 'dhcp)))
      (stream-deserialize obj binport)
      (setf *a* obj)
      (handle-dhcp-message *a*)
      )
    )
#+END_SRC

#+RESULTS:
: #<DHCP op=2,chaddr=(34 41 5D E6 78 E1 0 0 0 0 0 0 0 0 0 0)>

** Decode a dhcp request broadcast

    172.24.200.232.bootpc > 172.24.200.15.bootps: BOOTP/DHCP, Request from 00:16:3e:79:c0:76 (oui Unknown), length 300

#+BEGIN_SRC lisp
  (defvar *a* nil)
  (with-open-file (binport #P"dhcp-captures/android-moto.raw" :element-type '(unsigned-byte 8))
    (let ((obj (make-instance 'dhcp)))
      (stream-deserialize obj binport)
      (setf *a* obj)
      obj)
    )
#+END_SRC

#+RESULTS:
: #<DHCP op=1,chaddr=(D0 77 14 47 28 F4 0 0 0 0 0 0 0 0 0 0)>


#+BEGIN_SRC lisp
  (defvar *a* nil)
  (with-open-file (binport #P"dhcp-captures/moto2.bin" :element-type '(unsigned-byte 8))
    (let ((obj (make-instance 'dhcp)))
      (stream-deserialize obj binport)
      (setf *a* obj)
      obj)
    )
#+END_SRC

#+RESULTS:
: #<DHCP op=1,chaddr=(D0 77 14 47 28 F4 0 0 0 0 0 0 0 0 0 0)>


** Decode the dhcp options
   
#+BEGIN_SRC lisp :results output verbatim
  (let* ((ipA (handle-dhcp-message *a*))
         (buff (response->buff ipA)))
    (print buff)
    )

#+END_SRC

#+RESULTS:
: 
: #(2 1 6 0 53 15 192 107 0 0 0 0 0 0 0 0 192 168 1 1 192 168 1 1 0 0 0 0 208 119
:   20 71 40 244 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
:   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
:   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
:   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
:   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
:   0 0 0 0 0 0 0 0 0 0 0 0 0 0 99 130 83 99 53 1 2 1 4 255 255 255 0 3 4 192 168
:   1 1 51 4 0 0 0 120 1 4 192 168 1 1 6 8 8 8 8 8 4 4 4 4) 



#+BEGIN_SRC lisp :output list
  (flexi-streams:with-output-to-sequence (dummy :element-type '(unsigned-byte 8))
    (stream-serialize *a* dummy))
#+END_SRC

#+RESULTS:
| 1 | 1 | 6 | 0 | 45 | 203 | 39 | 203 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 208 | 119 | 20 | 71 | 40 | 244 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 99 | 130 | 83 | 99 | 53 | 1 | 1 | 61 | 7 | 1 | 208 | 119 | 20 | 71 | 40 | 244 | 57 | 2 | 5 | 220 | 60 | 14 | 97 | 110 | 100 | 114 | 111 | 105 | 100 | 45 | 100 | 104 | 99 | 112 | 45 | 57 | 55 | 10 | 1 | 3 | 6 | 15 | 26 | 28 | 51 | 58 | 59 | 43 | 255 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |



* COMMENT Setup

** Elisp
#+BEGIN_SRC elisp
    (defun buff-basename ()
      (file-name-base (buffer-name (current-buffer)))
      )
    (defun buff-name (str)
      "use the basename of this buffer to generate a name for a
    compent that is generated, thus related to this buffer"
      (concat (file-name-base (buffer-name (current-buffer))) str)
      )
#+END_SRC

#+RESULTS:
: buff-name



