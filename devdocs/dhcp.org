#+title: dhcp protocol meta code


* TODO parsing dhcp options
  returns an object now, with slot for the key options, and restof for the others

** TODO pretty print print-object for the class


    
* DHCP Info

** Key Resources
 
  | [[https://tools.ietf.org/html/rfc1531][RFC 1531]]       |
  | [[https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol][Wikipedia DHCP]] |
  | [[https://tools.ietf.org/html/rfc2132][RFC 2132]]       |


** DHCP Message
***  Goals
     - Define the fields for documentation 
     - Use babel org mode to publish this table as a *global* variable
     - Use lisp macros to generate 
       1. CLOS object
       2. serialization code from streams, sequences, json, text, ..
  
      
#+tblname: dhcp-static-header
#+results: dhcp-bootp-base-fields
   | Field   | Octets | description                              | type   | Notes                                    |
   |         |        | <40>                                     |        | <40>                                     |
   |---------+--------+------------------------------------------+--------+------------------------------------------|
   | op      |      1 | Message op code / message type. 1 = BOOTREQUEST, 2 = BOOTREPLY | int    |                                          |
   | htype   |      1 | Hardware address type, see ARP section in "Assigned Numbers" RFC; e.g., '1' = 10mb ethernet. | int    |                                          |
   | hlen    |      1 | Hardware address length (e.g. '6' for 10mb ethernet). | int    |                                          |
   | hops    |      1 | Client sets to zero, optionally used by relay-agents when booting via a relay-agent. | int    |                                          |
   | xid     |      4 | Transaction ID, a random number chosen by the client, used by the client and server to associate messages and responses between a client and a server. | int    |                                          |
   | secs    |      2 | Filled in by client, seconds elapsed since client started trying to boot. | int    |                                          |
   | flags   |      2 | Flags (see figure 2).                    | int    |                                          |
   | ciaddr  |      4 | Client IP address; filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters. | int    |                                          |
   | yiaddr  |      4 | 'your' (client) IP address.              | int    |                                          |
   | siaddr  |      4 | IP address of next server to use in bootstrap; returned in DHCPOFFER, DHCPACK and DHCPNAK by server. | int    |                                          |
   | giaddr  |      4 | Relay agent IP address, used in booting via a relay-agent. | int    |                                          |
   | chaddr  |     16 | Client hardware address.                 | mac    | Ethernet: 6 octets (48 bits)             |
   | sname   |     64 | Optional server host name, null terminated string. | string |                                          |
   | file    |    128 | Boot file name, null terminated string; "generic" name or null in DHCPDISCOVER, fully qualified directory-path name in DHCPOFFER. | string | I'm seeing the cookie at different places.  Search for it |
   | mcookie |      4 | 0x63825363                               | int    | Advance to the cookie and then parse     |
   | options |    312 | Optional parameters field.  See the options documents for a list of defined options. | rest   |                                          |


** DHCP Message Types
#+tblname: dhcp-message-types
   | Value | Message Type |
   |-------+--------------|
   |     1 | DHCPDISCOVER |
   |     2 | DHCPOFFER    |
   |     3 | DHCPREQUEST  |
   |     4 | DHCPDECLINE  |
   |     5 | DHCPACK      |
   |     6 | DHCPNAK      |
   |     7 | DHCPRELEASE  |
   |     8 | DHCPINFORM   |

** Publish dhcp-protocol to global variable
   Execute this code block to publish the dhcp-static.  Take not of the 'eval-when' This ensures that the global variable
   is published to the compiler system so that macro to generate code have access to this global variable before the
   runtime system is established.

#+BEGIN_SRC lisp :var clazz=dhcp-static-header 
  (with-open-file (*standard-output*
                   #P"../dhcp-bootp-fields.lisp"
                   :direction :output
                   :if-exists :supersede
                   :if-does-not-exist :create)
    (format t ";; AUTOGENERATED FILE FROM DHCP.ORG USING ORG-MODE-BABEL.  
  ;; DON'T EDIT HERE")
    (pprint
     `(in-package :dhcp-server))
    (pprint
     `(eval-when (:compile-toplevel :load-toplevel :execute)
        ;; The eval-when makes this top-level form available at
        ;; compile time to generate code from the table
        ;; definition.
        (defun ->symbol (str)
          (intern (string-upcase str)))
        
        (defun ->keyword (str)
          (intern (string-upcase str) :keyword))
        
        (defparameter *dhcp-bootp-base-fields* (quote ,(cddr clazz)))
        )
     )
    )
#+END_SRC

* Dev

** Decode a dhcp request broadcast

    172.24.200.232.bootpc > 172.24.200.15.bootps: BOOTP/DHCP, Request from 00:16:3e:79:c0:76 (oui Unknown), length 300

#+BEGIN_SRC lisp
  (defvar *a* nil)
  (with-open-file (binport #P"dhcp-captures/android-moto.raw" :element-type '(unsigned-byte 8))
    (let ((obj (make-instance 'dhcp)))
      (stream-deserialize obj binport)
      (setf *a* obj)
      obj)
    )
#+END_SRC

#+RESULTS:
: #<DHCP op=1,chaddr=(D0 77 14 47 28 F4 0 0 0 0 0 0 0 0 0 0)>


** Decode the dhcp options
#+BEGIN_SRC lisp :results output verbatim
  (let* ((ipA (handle-dhcp-message *a*)))
    (print (decode-dhcp-options (options ipA)))
     ;(print (options ipA))
    )
    

#+END_SRC


: (53 1 2 1 4 255 255 255 0 3 4 192 168 1 1 51 4 0 0 0 120 :DHCP-SERVER 192 168 1
:  1 :DNS-SERVER 8 8 8 8 4 4 4 4) 


#+BEGIN_SRC lisp
   (format nil "~X" 119)
#+END_SRC   

#+RESULTS:
: 77

#+BEGIN_SRC lisp :output list
  (flexi-streams:with-output-to-sequence (dummy)
    (stream-serialize *a* dummy))
#+END_SRC

#+RESULTS:
| 1 | 1 | 6 | 0 | 45 | 203 | 39 | 203 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 208 | 119 | 20 | 71 | 40 | 244 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 99 | 130 | 83 | 99 | 53 | 1 | 1 | 61 | 7 | 1 | 208 | 119 | 20 | 71 | 40 | 244 | 57 | 2 | 5 | 220 | 60 | 14 | 97 | 110 | 100 | 114 | 111 | 105 | 100 | 45 | 100 | 104 | 99 | 112 | 45 | 57 | 55 | 10 | 1 | 3 | 6 | 15 | 26 | 28 | 51 | 58 | 59 | 43 | 255 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |



* COMMENT Setup

** Elisp
#+BEGIN_SRC elisp
    (defun buff-basename ()
      (file-name-base (buffer-name (current-buffer)))
      )
    (defun buff-name (str)
      "use the basename of this buffer to generate a name for a
    compent that is generated, thus related to this buffer"
      (concat (file-name-base (buffer-name (current-buffer))) str)
      )
#+END_SRC

#+RESULTS:
: buff-name



