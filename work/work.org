#+title: work

[[/ssh:root@192.168.1.2:/]]

  Remote slime
#+BEGIN_SRC sh
  ssh -L 4009:localhost:4009 root@192.168.1.3
#+END_SRC



* Today
  [[file:../devdocs/]]
  [[file:../dhcp-server.lisp]]

* TODO error setting up ip address
  DEADLINE: <2019-09-21 Sat>

  

* TODO catch dhcp parse error and log
  DEADLINE: <2019-09-15 Sun>
   Just don't out the dhcp address, but keep chugging along

** TODO Try RBPi with just USB dongle
   https://superuser.com/questions/612155/how-do-i-use-a-single-wireless-adapter-for-both-an-access-point-and-client-on-ra


** TODO simple network map gui
    This might make getting mac memory working easier

** TODO simple network scan gui


** TODO have everything come up from a boot
   DEADLINE: <2019-09-24 Tue>
   hostapd brings the interface up.  Bringing the interface up before
   running that hostapd put things into a state that I couldn't recover
   from without a reboot. (I think I have a little scriplet here somewhere
   that would recover ...)

   The thing is, we need a fork/exec init kind of thing to run from here.
   
** TODO Have the program install everything to run as a daemon

** TODO add the interface

#+BEGIN_SRC sh
   apt-get install -y lib-ssh2-1-dev
#+END_SRC

#+RESULTS:

   Get the interface

#+BEGIN_SRC sh
   pkexec ip link set dev wlx9cefd5fdd60e up
#+END_SRC



* Week


** TODO dhcp release


* Month
** TODO zigbee turn lights on/off
   Use the current dongle.  Just an ezsp loop that sends a zcl broadcast command

** TODO vpn connection to isolitiare from iot devics

** TODO deploy to neo 
   Consider this for prototype 3

   - loose network-manager
   - simple GUI that displays scan results
   - tftp to work with scanner
   - connects to rbpi server 

** TODO fax machine and TV's working witih IOT nat

** TODO combine with snot

* Future


* TODO Laptop
** TODO turn network watchdog off and on
** TODO syslog
** TODO dhcp client
   Do we maybe want to get rid of network manager?


* TODO network watchdog
  if after 15m, there is no network connectivity -- reboot


* TODO create a commissioning network
  This is a virtual interface with a network allocated from *network-malloc*

** TODO verfify that this shows up on RBPI

** TODO up/down this network
   (defmethod net-up ((obj netobj))
    )

   
** TODO allocate IP and network info



** TODO simple/dumb dhcp address allocation
   incf for now


* TODO Receive and decode dhcp broadcast
  To send and receive broadcast

** netmask
   Be sure that netmask is correct. in windows mask for broadcast
    packets does not matters, but not in linux.

** wildcard address
   bind socket to INADDR_ANY

** setsockopt
   setsockopt to BROADCAST

** sendto
   call sendto with sendaddr.sin_addr.s_addr = inet_addr("your_interface_broadcast_address")

   call sento several times for each interface with its broadcast ip address.

** call recvfrom. any time before calling recvfrom, set up length parameter


* TODO move netsecurity.org document for erlang dhcp project here
  DEADLINE: <2019-09-07 Sat>
  It was all there, except for the actual way to stop x-talk on the
  wireless lan (seperate networks for each node)



* TODO Add a section to construct a reply
  Use the *commissioning-network* info above

* TODO change the print-object to display mac address
  mac address should use the 'size' operator which is one of the first parameters
  which then allows us to trim the chaddr field.


* TODO simple network scan GUI
   https://www.linuxjournal.com/content/wi-fi-command-line

#+BEGIN_SRC sh  :dir /sudo::~/
 iwlist wlan0 scan
#+END_SRC

#+RESULTS:

** TODO run function to determine if we can setup mesh router on this athena

** TODO prototype laptop without network manager
   Or maybe use the beaglebone

