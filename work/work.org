#+title: work

* TODO get routing working

#+BEGIN_SRC sh
    ip a add 192.168.12.1/255.255.255.0 dev wlx9cefd5fdd60e
#+END_SRC

#+RESULTS:


* TODO dhcp network based ip allocation code


* TODO have everything come up from a boot
  hostapd brings the interface up.  Bringing the interface up before
  running that hostapd put things into a state that I couldn't recover
  from without a reboot. (I think I have a little scriplet here somewhere
  that would recover ...)

  The thing is, we need a fork/exec init kind of thing to run from here.
  
** TODO Have the program install everything to run as a daemon

** TODO add the interface

#+BEGIN_SRC sh
   apt-get install -y lib-ssh2-1-dev
#+END_SRC

#+RESULTS:

   Get the interface

#+BEGIN_SRC sh
   #ip link set dev wlx9cefd5fdd60e up
#+END_SRC

#+RESULTS:
#+BEGIN_SRC sh :results output 
   ip link
#+END_SRC   

#+RESULTS:
: 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
:     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
: 2: enxb827eb659c11: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
:     link/ether b8:27:eb:65:9c:11 brd ff:ff:ff:ff:ff:ff
: 3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DORMANT group default qlen 1000
:     link/ether b8:27:eb:30:c9:44 brd ff:ff:ff:ff:ff:ff
: 4: wlx9cefd5fdd60e: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000
:     link/ether 9c:ef:d5:fd:d6:0e brd ff:ff:ff:ff:ff:ff


* TODO create a commissioning network
  This is a virtual interface with a network allocated from *network-malloc*


** TODO verfify that this shows up on RBPI

** TODO up/down this network
   (defmethod net-up ((obj netobj))
    )

   
** TODO allocate IP and network info



** TODO simple/dumb dhcp address allocation
   incf for now


* TODO Receive and decode dhcp broadcast
  To send and receive broadcast

** netmask
   Be sure that netmask is correct. in windows mask for broadcast
    packets does not matters, but not in linux.

** wildcard address
   bind socket to INADDR_ANY

** setsockopt
   setsockopt to BROADCAST

** sendto
   call sendto with sendaddr.sin_addr.s_addr = inet_addr("your_interface_broadcast_address")

   call sento several times for each interface with its broadcast ip address.

** call recvfrom. any time before calling recvfrom, set up length parameter




* TODO move netsecurity.org document for erlang dhcp project here
  It was all there, except for the actual way to stop x-talk on the wireless lan (seperate networks for each node)



* TODO Add a section to construct a reply
  Use the *commissioning-network* info above

* TODO change the print-object to display mac address
  mac address should use the 'size' operator which is one of the first parameters
  which then allows us to trim the chaddr field.

