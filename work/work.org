#+title: work
#+startup: overview

* Problem Statement

  A dhcp server that works with simplistic dhcp gateways running in a
  IOT mesh network to provide the capability to run 100k nodes in
  a single network.


* Today <2020-10-03 Sat>

  Document how I think this system will work

  We will have 2 primary use-cases that are the extremes of any
  network topography we will want this scheme to handle.

  1. The target network is a perfect fractel circle (or sphere), where
     every node has exactly 8 connection in equal; bi-directional
     transmission distance, maximum radial distance from the APSTA as AP client
     connections.

  2. The target network is a linked-list like deployment.  Imaging we
     get the contract to do all of the highway lighting for route 70
     running from Maryland on the US east-coast to California on the
     West Coast.  In this scenario, imagine also that we do the on/off
     ramps into the nearest small city right off the highway, thus we
     will have little geographical =subnets= that will need a 

  Basically, the best system I've been able to come up with is a
  simple 0-8 tree (like a 2-3 tree or a b-tree) that the dhcp will model and the mesh 
  will implement.  With this MESH, we throw away netmask routing, and use simplier
  numerical predicate logic.

  The COORDINATOR is always 10.0.0.0, and every MESH node has an IP
  address > then it.  This idea can easily be refined later, where
  COORDINATORS could have a different IP address, where we use
  regurlar netmask routing, but for the rest of this document we will
  assume the COORDINATOR gets the entire Class-A private address space, and it 
  starts at 10.0.0.0. 

  Every mote has an IP > COORDINATOR.

** motes use int conditional logic to route, not netmasks
   
   Each node has 1 IP address, even though they have 2 interfaces.  Does the AP interface
   really need an IP address?

*** dest < IP
    if the destination IP address is < the node's IP address, send it to the STA's gateway

*** dest == IP:
     right here baby

*** dest > IP
    Go through the children, and send it to the node that is max least IP.  

    AP clients, 0 - 8 nodes

 through the list, and find the entry
     where dest is > then the entry but less than entry->next.





** inc-net operation
   How do we manage the IP distribution over the APSTA STA clients?

   Given a parent in the MESH is out of IP addresses to give to it's
   new child, then we can issue an inc-net broadcast with the parent's
   IP address and then give the child that address + 1.  The inc-net
   operation will go throu and update all of the routing tables and all of the
   mote's IP addresses and everything will work.

*** Example 1 
    Assume a network layout shaped like the Washington monument, nodes
    going all the way up the monement, with serveral also spread just
    outside the monement at the base, say the shrubs and two small
    buildings (at the base).

    We want a large allocation of IP addresses to go up the middle, so how will
    this linear list of 

#+BEGIN_SRC ditaa

		    +-----------+
		    | x x x x x |
		    | x  x   x  |
		    |   x  x  x |
		    |x x x x x  |
		    |  x  x   x |
		    |	x . x x |
		    | x    x    |
		    |  x xx x   |
		    | x   x  x  |
		    |  x x    x |
		    | x    x x  |
	 +---------+|  x x x  x | +-----------+
	 |x5    x6 ||x x x   xx | | x x  x    |
	 |   x4    ||   x b x x | |     x    x|
	 |x3  x2   |+-----------+ |  x    x   |
	 |         |		  |     x   x |
	 | x1    a |		  | d  x20 x21 |
	 +---------+		  +-----------+

                         C
#+END_SRC
   Assume C has 3 chidlren, a b and d.  We will want the station's routing table to look something like

   | a |  10.0.0.1 |  7 |
   | d |  10.0.0.8 | 12 |
   | b | 10.0.0.20 |  n |

   The basic idea, is to let a segment run until it fails.  When we get a failure, then we must 
   adjust (increment) all of the IP addresses in the other regions by 1.


   | Step | action         |          |                   |
   |------+----------------+----------+-------------------|
   |    0 | initial        |          |                   |
   |    1 | a joins        |          |                   |
   |      | a              | 10.0.0.1 |                   |
   |      | d joins        |          |                   |
   |      | d              | 10.0.0.2 |                   |
   |      | x1 joins       |          |                   |
   |      | x1             |     FAIL |                   |
   |------+----------------+----------+-------------------|
   |      | (inc-net a.ip) |        d | broadcast         |
   |------+----------------+----------+-------------------|
   |      | d              | 10.0.0.3 |                   |
   |      | x21 joins      | 10.0.0.4 |                   |
   |      | x2 joins       | 10.0.0.2 |                   |
   |      | x1 joins       |     FAIL | out-of-addressess |
   |      | (inc-net a.ip) |          | a.ip = 10.0.0.1   |
   |      | d              | 10.0.0.4 |                   |
   |      | x21            | 10.0.0.5 |                   |
   |      | x2             | 10.0.0.3 |                   |


   inc-net: In the above scenario, we failed to add X1 through a.  A
   needs more addresses.  We send a simple broadcast message with the
   address of a, then every node who recieves the message simply
   increments thier IP address if they already had an IP > a.
  
   

** Risks
*** Pretty sure I can gateway route like this in FreeRTOS
*** Do I need IP's for each FreeRTOS interface?
    Can I use the same IP?



* Key Files
  [[file:../devdocs/]]
  [[file:../dhcp-server.lisp]]


255.255.255.252 64 nets      N.N.N.0     N.N.N.1-2        N.N.N.3
6 bit Class C   2            N.N.N.4     N.N.N.5-6        N.N.N.7
14 bit Class B               N.N.N.8     N.N.N.9-10       N.N.N.11
                             N.N.N.244   N.N.N.245-246    N.N.N.247
                             N.N.N.248   N.N.N.249-250    N.N.N.251
                             N.N.N.252   N.N.N.253-254    N.N.N.255

#<CIDR-NET #(10 0 12 0)/24>
#+begin_src lisp
  (length (dhcp::subnets *this-net* 2))
#+end_src

#+RESULTS:
: 126

#+begin_src lisp
    (defvar *subnets* 
      (mapcar #'(lambda(ip)
		  (cons ip (get-universal-time)))
		  (dhcp::subnets *this-net* 2))
      )
    (defparameter *cidr-subnets* 
      (mapcar #'(lambda(snip)
		  (make-instance 'cidr-net
		      :ipnum snip
		      :cidr 30
		      :mask (logand #xffffffff (lognot #b11))
		      )
		  )
		  (mapcar #'car *subnets*)))
#+end_src

#+RESULTS:
: *CIDR-SUBNETS*

#+begin_src lisp
  (dhcp::subnet-info *this-net* 2)
#+end_src

#+RESULTS:
| :NUM-NETS | 126 |


* ORG GUIS

** OS Net Interfaces
*** List links
    #+begin_src lisp :results output
     (loop :for obj in (lsa:ip-link-objs) do
       (format t "~5a,~10A,~10A~%" (lsa:name obj) (lsa:state obj) (lsa:mac obj))
       )
   
    #+end_src

    #+RESULTS:
    : lo   ,UNKNOWN   ,00:00:00:00:00:00
    : wlo1 ,UP        ,48:45:20:ef:5b:e6


*** List addresses
    #+begin_src lisp :results output
      (loop :for obj in (lsa:ip-addr-objs) do
	(format t "~5a,~10A,~20A,~20a,~10A~%" (lsa:name obj) (lsa:state obj) (lsa:mac obj) (lsa:ltype obj) (lsa:addr obj))
       )   
    #+end_src

    #+RESULTS:
    : lo   ,UNKNOWN   ,00:00:00:00:00:00   ,link/loopback       ,127.0.0.1/8
    : wlo1 ,UP        ,48:45:20:ef:5b:e6   ,link/ether          ,192.168.1.3/24


** cidr-subnets
   #+begin_src lisp :result 
	 (cons
	  (list "iface addr" "cidr block" "netmask" "netmask hex")
	   (mapcar 
	    #'(lambda(obj)
		(list (numex:num->octets (ipnum obj))
		      (format nil "/~a" (cidr obj))
		      (numex:num->octets (mask obj))
		      (format nil "~X" (logand #xffffffff (mask obj)))
		      ))
	    ,*cidr-subnets*)))
   #+end_src

   #+RESULTS:
   | iface addr    | cidr block | netmask           | netmask hex |
   | (10 0 12 1)   | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 3)   | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 5)   | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 7)   | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 9)   | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 11)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 13)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 15)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 17)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 19)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 21)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 23)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 25)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 27)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 29)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 31)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 33)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 35)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 37)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 39)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 41)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 43)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 45)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 47)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 49)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 51)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 53)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 55)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 57)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 59)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 61)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 63)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 65)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 67)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 69)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 71)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 73)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 75)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 77)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 79)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 81)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 83)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 85)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 87)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 89)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 91)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 93)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 95)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 97)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 99)  | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 101) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 103) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 105) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 107) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 109) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 111) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 113) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 115) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 117) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 119) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 121) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 123) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 125) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 127) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 129) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 131) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 133) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 135) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 137) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 139) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 141) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 143) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 145) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 147) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 149) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 151) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 153) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 155) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 157) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 159) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 161) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 163) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 165) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 167) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 169) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 171) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 173) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 175) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 177) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 179) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 181) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 183) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 185) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 187) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 189) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 191) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 193) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 195) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 197) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 199) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 201) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 203) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 205) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 207) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 209) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 211) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 213) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 215) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 217) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 219) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 221) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 223) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 225) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 227) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 229) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 231) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 233) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 235) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 237) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 239) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 241) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 243) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 245) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 247) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 249) | /30        | (255 255 255 252) | FFFFFFFC    |
   | (10 0 12 251) | /30        | (255 255 255 252) | FFFFFFFC    |


* DHCP Allocation Stategies
  :LOGBOOK:
  CLOCK: [2020-10-02 Fri 21:11]
  :END:
  
** TODO allocation based on 3 bits

   Using this allocation scheme, we are going to get something like 8
   hops of radial distance from the coordinator.

#+BEGIN_SRC lisp
(ldb (byte 8 8) (numex:octets->num #(10 9 8 7) ))
#+END_SRC

#+RESULTS:
: 8

*** TODO Max Hops - Radial distance                                   :dhcps:
    Document this, publish in this readme

    32 bits
    10.0.0.0 - 10.255.255.255
    24 bits of network address
#+name: cnet-netmask-max-hops
#+BEGIN_SRC lisp
   (/ 24 3)
#+END_SRC    

#+RESULTS: cnet-netmask-max-hops
: 8

#+BEGIN_SRC lisp :results table
   (alexandria:iota 24)
#+END_SRC

|---+---+---+---+---+---+---+---+---+---+----+----+----+----+----+----+----+----+----+----+----+----+----+----|
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 |
|---+---+---+---+---+---+---+---+---+---+----+----+----+----+----+----+----+----+----+----+----+----+----+----|
| 1 | 1 | 1 | 2 | 2 | 2 | 3 | 3 | 3 | 4 |  4 |  4 |  5 |  5 |  5 |  6 |  6 |  6 |  7 |  7 |  7 |  8 |  8 |  8 |
|---+---+---+---+---+---+---+---+---+---+----+----+----+----+----+----+----+----+----+----+----+----+----+----|
| 7 | 7 | 7 |   |   |   |   |   |   |   |    |    |    |    |    |    |    |    |    |    |    |    |    |    |


*** TODO Only split the hops address space if we have to

    Write a function that splits the address space for hops.  We allocate

    Why not have a tree of allocated networks

#+BEGIN_SRC lisp 
  

(defun split-net (net-tree)
  
  )
#+END_SRC

*** TODO how dow we remember alloctions and allow freeing           :p:dhcps:
    - parameters: 
       (byte 8 8) - This is what defines the network we are on.

** TODO function that takes parent integer and returns 8 children


** Netmask Allocation
   Calculate the netmasks and routing tables that will be allocated
   for a perfect 2d fractle circle, depth of 3 with 8 networks per node.

#+name: hop-allocation-calcs
#+BEGIN_SRC lisp :results table
(defparameter *nchildren* 8)

(defparameter *childnet-netmask* (byte 3 8) )

(defun make-cnet (hops)
  (unless (and (> hops 0) 
	       (<= hops 10))
    (error "Hops must be a positive integer between 1 and 10"))
  
  )

(defun ipa-child (ipaddr child-n)
  (unless (< child-n *nchildren*)
    (error "child-n too big ~a" child-n))
  (numex:num->octets ipaddr :length 4)
  )

(defun ipa-children(ipaddr)
  (cons
   (list "Node" "" "#b child-nets")
   (loop :for i :from 0 :below  *nchildren*
	 :for j :from 0
	 :collect
	 (list j 10 (list (format nil "~4d" (ash i 5)) (format nil "~8b" (ash i 5)))   0 0)
	 )
   ))

(ipa-children (numex:octets->num #(10 0 0 0) ))
#+END_SRC

#+RESULTS: hop-allocation-calcs
| Node |    | #b child-nets   |   |   |
|    0 | 10 | (   0        0) | 0 | 0 |
|    1 | 10 | (  32   100000) | 0 | 0 |
|    2 | 10 | (  64  1000000) | 0 | 0 |
|    3 | 10 | (  96  1100000) | 0 | 0 |
|    4 | 10 | ( 128 10000000) | 0 | 0 |
|    5 | 10 | ( 160 10100000) | 0 | 0 |
|    6 | 10 | ( 192 11000000) | 0 | 0 |
|    7 | 10 | ( 224 11100000) | 0 | 0 |


** Hash
