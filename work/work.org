#+title: work

* Today
  [[file:../devdocs/]]
  [[file:../dhcp-server.lisp]]

** DONE fixup ip generator function of dhcp server
#+BEGIN_SRC lisp
  (let ((reqMsg (make-instance 'dhcp :chaddr #(1 2 3 4 5 6))))
    (dhcp-allocate-ip reqMsg *this-net*)
    )
#+END_SRC

#+RESULTS:
: #<DHCP-ADDRESS #(1 2 3 4 5 6),10.0.12.2,0,300>

** DONE get mac address memory working

** TODO get working with chromebook's dhcp client

** TODO catch dhcp parse error and log
   Just don't out the dhcp address, but keep chugging along

** TODO check if rbpi has working watchdog

* Week

** TODO Add route for host on startup
#+BEGIN_SRC sh
    gksu ip a add 192.168.12.1/255.255.255.0 dev wlx9cefd5fdd60e
#+END_SRC

** TODO simple network map gui
   This might make getting mac memory working easier

** TODO simple network scan GUI

** TODO deploy bitbake image to beaglebone green

* Month
** TODO zigbee turn lights on/off
   Use the current dongle.  Just an ezsp loop that sends a zcl broadcast command

** TODO vpn connection to isolitiare from iot devics


** TODO deploy to neo 
   Consider this for prototype 3

   - loose network-manager
   - simple GUI that displays scan results
   - tftp to work with scanner
   - connects to rbpi server 

** TODO bring this up on laptop
*** TODO try using submodules 
*** TODO 2nd laptop joins g3
    traceroute, find out why we are not routing
** TODO fax machine and TV's working witih IOT nat

** TODO combine with snot

* Future



* RBPI
  If we want to use threads, we are going to need to use ccl-bin, or ecl.  
** ccl-bin
** ecl


* TODO Laptop
** TODO turn network watchdog off and on
** TODO syslog
** TODO dhcp client
   Do we maybe want to get rid of network manager?




* TODO network watchdog
  if after 15m, there is no network connectivity -- reboot


* TODO have everything come up from a boot
  hostapd brings the interface up.  Bringing the interface up before
  running that hostapd put things into a state that I couldn't recover
  from without a reboot. (I think I have a little scriplet here somewhere
  that would recover ...)

  The thing is, we need a fork/exec init kind of thing to run from here.
  
** TODO Have the program install everything to run as a daemon

** TODO add the interface

#+BEGIN_SRC sh
   apt-get install -y lib-ssh2-1-dev
#+END_SRC

#+RESULTS:

   Get the interface

#+BEGIN_SRC sh
   pkexec ip link set dev wlx9cefd5fdd60e up
#+END_SRC



* TODO create a commissioning network
  This is a virtual interface with a network allocated from *network-malloc*


** TODO verfify that this shows up on RBPI

** TODO up/down this network
   (defmethod net-up ((obj netobj))
    )

   
** TODO allocate IP and network info



** TODO simple/dumb dhcp address allocation
   incf for now


* TODO Receive and decode dhcp broadcast
  To send and receive broadcast

** netmask
   Be sure that netmask is correct. in windows mask for broadcast
    packets does not matters, but not in linux.

** wildcard address
   bind socket to INADDR_ANY

** setsockopt
   setsockopt to BROADCAST

** sendto
   call sendto with sendaddr.sin_addr.s_addr = inet_addr("your_interface_broadcast_address")

   call sento several times for each interface with its broadcast ip address.

** call recvfrom. any time before calling recvfrom, set up length parameter




* TODO move netsecurity.org document for erlang dhcp project here
  It was all there, except for the actual way to stop x-talk on the wireless lan (seperate networks for each node)



* TODO Add a section to construct a reply
  Use the *commissioning-network* info above

* TODO change the print-object to display mac address
  mac address should use the 'size' operator which is one of the first parameters
  which then allows us to trim the chaddr field.

* DONE dhcp network based ip allocation code

* DONE give the same address out for mac hit

