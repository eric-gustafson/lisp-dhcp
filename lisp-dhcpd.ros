#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  ;;#+quicklisp(ql:quickload '() :silent t)
  )


(ql:quickload :dhcp-server)
(defpackage :ros.script.lisp-dhcpd.3767092429
  (:use :cl :cl-who))
(in-package :ros.script.lisp-dhcpd.3767092429)


(hunchentoot:define-easy-handler (ndice-langs-handler :uri "/")
    ()
  (with-html-output
      (*standard-output*)
    (htm
     (:html
      (:body
       (:h2 "Snot GUI")
       (:p "That's America Man")
       )
      )
     )
    )
  )

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((argv #+(or sbcl) (cdr sb-ext:*posix-argv*)
	      #+(or ccl) ccl:*unprocessed-command-line-arguments*)
	)
    (dhcp-server:alog "starting security appliance")
    (destructuring-bind (&key (sport 4010) (bg nil))
        (loop for x in argv collect (with-input-from-string (p x) (read p)))
      (when bg
	(daemon:daemonize   :output #P"/var/log/sagent.log"   :error #P"/var/log/sagent-error.log"   :pidfile #P"/tmp/my.pid"   :exit-parent t))
      (swank:create-server :dont-close t :port sport)
      (dhcp-server:setup-hostapd)
      (dhcp-server:setup-prototype)
      (dhcp-server:nat-routing)
      (dhcp-server:setup-dhcp-network-interfaces)
      (dhcp-server:run)
      (dhcp-server:alog "appliance up")
      (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 80))      
      (loop (sleep 60))
      )
    )
  )

;;; vim: set ft=lisp lisp:
