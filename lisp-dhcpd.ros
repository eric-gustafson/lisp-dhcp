#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  ;;#+quicklisp(ql:quickload '() :silent t)
  )


(ql:quickload :dhcp-server)
(defpackage :ros.script.lisp-dhcpd.3767092429
  (:use :cl :cl-who))
(in-package :ros.script.lisp-dhcpd.3767092429)

(defvar *wifi-info-buffer* nil)

(defvar *settings-path* #P"/home/root/secapp-settings")

(defvar *settings* (if (fad:file-exists-p *settings-path*)
		       (cl-store:restore *settings-path*)
		       (serapeum:dict #'equalp)))

(defun settings-store ()
  "stores the settings hash to disk"
  (cl-store:store *settings* *settings-path*))

(hunchentoot:define-easy-handler (secapp-main :uri "/")
    ((app-name :parameter-type 'string))
  (hunchentoot:start-session)
  (when (not (equal (hunchentoot:session-value :app-name) app-name))
    (setf (gethash :app-name *settings*) app-name)
    (setf (hunchentoot:session-value :app-name) app-name)
    (settings-store))
  (with-html-output-to-string
      (*standard-output*)
    (cl-who:fmt "<!doctype html>~%")    
    (:html
     (:body
      (:h2 "Defense")
      (:form
       (:table
	(:tr
	 (:td (str "Name:")
	      (:input :type "text"
		      :length 20
		      :value (or (gethash :app-name *settings*)
				 "")
		      )))
	(:tr
	 (:td (:input :type "submit")))))
      (:p "That's America Man")
      (:table
       (:tbody
	(loop
	   :for n :in dhcp-server::*dhcp-nets* :do
	   (htm
	    (:tr (:td
		  (fmt "~a" (numex:->dotted n)))
		 )
	    )
	   )
	)
       )
      (:a :href "/wifi/device/rawbuff"
	  (str "Device Buffer"))
      )
     )
    )
  )


(hunchentoot:define-easy-handler (wifi-device-raw-info :uri "/wifi/device/rawbuff")
    ()
  (hunchentoot:start-session)
  (with-html-output-to-string
      (*standard-output*)
    (cl-who:fmt "<!doctype html>~%")    
    (:html
     (:body
      (:h2 "iw list")
      (:pre
       (str *wifi-info-buffer*)
       )
      )
     )
    )
  )
  
(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((argv #+(or sbcl) (cdr sb-ext:*posix-argv*)
	      #+(or ccl) ccl:*unprocessed-command-line-arguments*)
	)
    (dhcp-server:alog "starting security appliance")
    (destructuring-bind (&key (sport 4010) (bg nil) if)
        (loop for x in argv collect (with-input-from-string (p x) (read p)))
      (when bg
	(daemon:daemonize   :output #P"/var/log/sagent.log"   :error #P"/var/log/sagent-error.log"   :pidfile #P"/tmp/my.pid"   :exit-parent t))
      (when if
	(setf *wifi-ap-link* if))
      (swank:create-server :dont-close t :port sport)
      (setf *wifi-info-buffer* (inferior-shell:run/s "iw list"))
      (dhcp-server:setup-hostapd)
      (dhcp-server:setup-prototype)
      (dhcp-server:nat-routing)
      (dhcp-server:setup-dhcp-network-interfaces)
      (dhcp-server:run)
      (dhcp-server:alog "appliance up")
      (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 80))
      (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 8080))
      (loop (sleep 60))
      )
    )
  )

;;; vim: set ft=lisp lisp:
